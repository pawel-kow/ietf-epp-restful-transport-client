# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EppDcpType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'EppDcpAccessType',
        'expiry': 'EppDcpExpiryType',
        'statement': 'list[EppDcpStatementType]'
    }

    attribute_map = {
        'access': 'access',
        'expiry': 'expiry',
        'statement': 'statement'
    }

    def __init__(self, access=None, expiry=None, statement=None):  # noqa: E501
        """EppDcpType - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._expiry = None
        self._statement = None
        self.discriminator = None
        self.access = access
        if expiry is not None:
            self.expiry = expiry
        if statement is not None:
            self.statement = statement

    @property
    def access(self):
        """Gets the access of this EppDcpType.  # noqa: E501


        :return: The access of this EppDcpType.  # noqa: E501
        :rtype: EppDcpAccessType
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this EppDcpType.


        :param access: The access of this EppDcpType.  # noqa: E501
        :type: EppDcpAccessType
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def expiry(self):
        """Gets the expiry of this EppDcpType.  # noqa: E501


        :return: The expiry of this EppDcpType.  # noqa: E501
        :rtype: EppDcpExpiryType
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this EppDcpType.


        :param expiry: The expiry of this EppDcpType.  # noqa: E501
        :type: EppDcpExpiryType
        """

        self._expiry = expiry

    @property
    def statement(self):
        """Gets the statement of this EppDcpType.  # noqa: E501


        :return: The statement of this EppDcpType.  # noqa: E501
        :rtype: list[EppDcpStatementType]
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this EppDcpType.


        :param statement: The statement of this EppDcpType.  # noqa: E501
        :type: list[EppDcpStatementType]
        """

        self._statement = statement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EppDcpType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EppDcpType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
