# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostPanDataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'HostPaNameType',
        'pa_date': 'datetime',
        'pa_trid': 'EppTrIDType'
    }

    attribute_map = {
        'name': 'name',
        'pa_date': 'paDate',
        'pa_trid': 'paTRID'
    }

    def __init__(self, name=None, pa_date=None, pa_trid=None):  # noqa: E501
        """HostPanDataType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._pa_date = None
        self._pa_trid = None
        self.discriminator = None
        self.name = name
        self.pa_date = pa_date
        self.pa_trid = pa_trid

    @property
    def name(self):
        """Gets the name of this HostPanDataType.  # noqa: E501


        :return: The name of this HostPanDataType.  # noqa: E501
        :rtype: HostPaNameType
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostPanDataType.


        :param name: The name of this HostPanDataType.  # noqa: E501
        :type: HostPaNameType
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pa_date(self):
        """Gets the pa_date of this HostPanDataType.  # noqa: E501


        :return: The pa_date of this HostPanDataType.  # noqa: E501
        :rtype: datetime
        """
        return self._pa_date

    @pa_date.setter
    def pa_date(self, pa_date):
        """Sets the pa_date of this HostPanDataType.


        :param pa_date: The pa_date of this HostPanDataType.  # noqa: E501
        :type: datetime
        """
        if pa_date is None:
            raise ValueError("Invalid value for `pa_date`, must not be `None`")  # noqa: E501

        self._pa_date = pa_date

    @property
    def pa_trid(self):
        """Gets the pa_trid of this HostPanDataType.  # noqa: E501


        :return: The pa_trid of this HostPanDataType.  # noqa: E501
        :rtype: EppTrIDType
        """
        return self._pa_trid

    @pa_trid.setter
    def pa_trid(self, pa_trid):
        """Sets the pa_trid of this HostPanDataType.


        :param pa_trid: The pa_trid of this HostPanDataType.  # noqa: E501
        :type: EppTrIDType
        """
        if pa_trid is None:
            raise ValueError("Invalid value for `pa_trid`, must not be `None`")  # noqa: E501

        self._pa_trid = pa_trid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostPanDataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostPanDataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
