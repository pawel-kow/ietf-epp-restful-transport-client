# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DomainsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def domains_id_delete(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_delete(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_delete_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_delete`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_get(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_get(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :param str filter: Name of attibute to filter on
        :param str val: Value to use for filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_get_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :param str filter: Name of attibute to filter on
        :param str val: Value to use for filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext', 'repp_auth_info', 'repp_roid', 'filter', 'val']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_get`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'val' in params:
            query_params.append(('val', params['val']))  # noqa: E501

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'repp_auth_info' in params:
            header_params['REPP-authInfo'] = params['repp_auth_info']  # noqa: E501
        if 'repp_roid' in params:
            header_params['REPP-Roid'] = params['repp_roid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_head(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_head(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_head_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_head_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_head_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_head_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_head`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_head`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_head`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_head`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_patch(self, body, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_patch(body, repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Default request body for XML of JSON message (required)
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_patch_with_http_info(body, repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_patch_with_http_info(body, repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_patch_with_http_info(self, body, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_patch_with_http_info(body, repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Default request body for XML of JSON message (required)
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `domains_id_patch`")  # noqa: E501
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_patch`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_patch`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_patch`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_renewals_post(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain renew  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_renewals_post(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str unit: Unit used for renewal value (e.g. y for year)
        :param int value: Value for renewal
        :param str current_date: Date on which the current validity period ends
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_renewals_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_renewals_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_renewals_post_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain renew  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_renewals_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str unit: Unit used for renewal value (e.g. y for year)
        :param int value: Value for renewal
        :param str current_date: Date on which the current validity period ends
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext', 'unit', 'value', 'current_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_renewals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_renewals_post`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_renewals_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_renewals_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_renewals_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'current_date' in params:
            query_params.append(('current-date', params['current_date']))  # noqa: E501

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}/renewals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_transfers_latest_delete(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer cancel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_delete(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_transfers_latest_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_transfers_latest_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_transfers_latest_delete_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer cancel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_delete_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_transfers_latest_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_transfers_latest_delete`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_transfers_latest_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_transfers_latest_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_transfers_latest_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}/transfers/latest', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_transfers_latest_get(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_get(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_transfers_latest_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_transfers_latest_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_transfers_latest_get_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_get_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext', 'repp_auth_info', 'repp_roid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_transfers_latest_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_transfers_latest_get`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_transfers_latest_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_transfers_latest_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_transfers_latest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'repp_auth_info' in params:
            header_params['REPP-authInfo'] = params['repp_auth_info']  # noqa: E501
        if 'repp_roid' in params:
            header_params['REPP-Roid'] = params['repp_roid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}/transfers/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_transfers_latest_put(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer approve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_put(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_transfers_latest_put_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_transfers_latest_put_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_transfers_latest_put_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer approve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_latest_put_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_transfers_latest_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_transfers_latest_put`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_transfers_latest_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_transfers_latest_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_transfers_latest_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}/transfers/latest', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_id_transfers_post(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_post(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :param str unit: Unit used for renewal value (e.g. y for year)
        :param int value: Value for renewal
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_id_transfers_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_id_transfers_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, **kwargs)  # noqa: E501
            return data

    def domains_id_transfers_post_with_http_info(self, repp_cltrid, repp_svcs, accept_language, id, **kwargs):  # noqa: E501
        """Domain transfer request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_id_transfers_post_with_http_info(repp_cltrid, repp_svcs, accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str id: Object identifier (required)
        :param str body: Default request body for XML of JSON message
        :param str repp_svcs_ext: Extension namespace used
        :param str repp_auth_info: Object authorization details
        :param str repp_roid: Object linked to authorization
        :param str unit: Unit used for renewal value (e.g. y for year)
        :param int value: Value for renewal
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repp_cltrid', 'repp_svcs', 'accept_language', 'id', 'body', 'repp_svcs_ext', 'repp_auth_info', 'repp_roid', 'unit', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_id_transfers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_id_transfers_post`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_id_transfers_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_id_transfers_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `domains_id_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'repp_auth_info' in params:
            header_params['REPP-authInfo'] = params['repp_auth_info']  # noqa: E501
        if 'repp_roid' in params:
            header_params['REPP-Roid'] = params['repp_roid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains/{id}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domains_post(self, body, repp_cltrid, repp_svcs, accept_language, **kwargs):  # noqa: E501
        """Domain create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_post(body, repp_cltrid, repp_svcs, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainCreateRequest body: (required)
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domains_post_with_http_info(body, repp_cltrid, repp_svcs, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.domains_post_with_http_info(body, repp_cltrid, repp_svcs, accept_language, **kwargs)  # noqa: E501
            return data

    def domains_post_with_http_info(self, body, repp_cltrid, repp_svcs, accept_language, **kwargs):  # noqa: E501
        """Domain create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domains_post_with_http_info(body, repp_cltrid, repp_svcs, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainCreateRequest body: (required)
        :param str repp_cltrid: Client transaction identifier (required)
        :param str repp_svcs: Namespace used (required)
        :param str accept_language: Language used for response (required)
        :param str repp_svcs_ext: Extension namespace used
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repp_cltrid', 'repp_svcs', 'accept_language', 'repp_svcs_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domains_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `domains_post`")  # noqa: E501
        # verify the required parameter 'repp_cltrid' is set
        if ('repp_cltrid' not in params or
                params['repp_cltrid'] is None):
            raise ValueError("Missing the required parameter `repp_cltrid` when calling `domains_post`")  # noqa: E501
        # verify the required parameter 'repp_svcs' is set
        if ('repp_svcs' not in params or
                params['repp_svcs'] is None):
            raise ValueError("Missing the required parameter `repp_svcs` when calling `domains_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `domains_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'repp_cltrid' in params:
            header_params['REPP-cltrid'] = params['repp_cltrid']  # noqa: E501
        if 'repp_svcs' in params:
            header_params['REPP-svcs'] = params['repp_svcs']  # noqa: E501
        if 'repp_svcs_ext' in params:
            header_params['REPP-svcs-ext'] = params['repp_svcs_ext']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/epp+json', 'application/epp+xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/domains', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
