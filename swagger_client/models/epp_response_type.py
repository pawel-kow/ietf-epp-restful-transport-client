# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EppResponseType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extension': 'EppExtAnyType',
        'msg_q': 'EppMsgQType',
        'res_data': 'EppExtAnyType',
        'result': 'list[EppResultType]',
        'tr_id': 'EppTrIDType'
    }

    attribute_map = {
        'extension': 'extension',
        'msg_q': 'msgQ',
        'res_data': 'resData',
        'result': 'result',
        'tr_id': 'trID'
    }

    def __init__(self, extension=None, msg_q=None, res_data=None, result=None, tr_id=None):  # noqa: E501
        """EppResponseType - a model defined in Swagger"""  # noqa: E501
        self._extension = None
        self._msg_q = None
        self._res_data = None
        self._result = None
        self._tr_id = None
        self.discriminator = None
        if extension is not None:
            self.extension = extension
        if msg_q is not None:
            self.msg_q = msg_q
        if res_data is not None:
            self.res_data = res_data
        self.result = result
        self.tr_id = tr_id

    @property
    def extension(self):
        """Gets the extension of this EppResponseType.  # noqa: E501


        :return: The extension of this EppResponseType.  # noqa: E501
        :rtype: EppExtAnyType
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this EppResponseType.


        :param extension: The extension of this EppResponseType.  # noqa: E501
        :type: EppExtAnyType
        """

        self._extension = extension

    @property
    def msg_q(self):
        """Gets the msg_q of this EppResponseType.  # noqa: E501


        :return: The msg_q of this EppResponseType.  # noqa: E501
        :rtype: EppMsgQType
        """
        return self._msg_q

    @msg_q.setter
    def msg_q(self, msg_q):
        """Sets the msg_q of this EppResponseType.


        :param msg_q: The msg_q of this EppResponseType.  # noqa: E501
        :type: EppMsgQType
        """

        self._msg_q = msg_q

    @property
    def res_data(self):
        """Gets the res_data of this EppResponseType.  # noqa: E501


        :return: The res_data of this EppResponseType.  # noqa: E501
        :rtype: EppExtAnyType
        """
        return self._res_data

    @res_data.setter
    def res_data(self, res_data):
        """Sets the res_data of this EppResponseType.


        :param res_data: The res_data of this EppResponseType.  # noqa: E501
        :type: EppExtAnyType
        """

        self._res_data = res_data

    @property
    def result(self):
        """Gets the result of this EppResponseType.  # noqa: E501


        :return: The result of this EppResponseType.  # noqa: E501
        :rtype: list[EppResultType]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this EppResponseType.


        :param result: The result of this EppResponseType.  # noqa: E501
        :type: list[EppResultType]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def tr_id(self):
        """Gets the tr_id of this EppResponseType.  # noqa: E501


        :return: The tr_id of this EppResponseType.  # noqa: E501
        :rtype: EppTrIDType
        """
        return self._tr_id

    @tr_id.setter
    def tr_id(self, tr_id):
        """Sets the tr_id of this EppResponseType.


        :param tr_id: The tr_id of this EppResponseType.  # noqa: E501
        :type: EppTrIDType
        """
        if tr_id is None:
            raise ValueError("Invalid value for `tr_id`, must not be `None`")  # noqa: E501

        self._tr_id = tr_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EppResponseType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EppResponseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
