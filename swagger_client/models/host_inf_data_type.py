# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostInfDataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'list[HostAddrType]',
        'cl_id': 'EppcomClIDType',
        'cr_date': 'datetime',
        'cr_id': 'EppcomClIDType',
        'name': 'EppcomLabelType',
        'roid': 'EppcomRoidType',
        'status': 'list[HostStatusType]',
        'tr_date': 'datetime',
        'up_date': 'datetime',
        'up_id': 'EppcomClIDType'
    }

    attribute_map = {
        'addr': 'addr',
        'cl_id': 'clID',
        'cr_date': 'crDate',
        'cr_id': 'crID',
        'name': 'name',
        'roid': 'roid',
        'status': 'status',
        'tr_date': 'trDate',
        'up_date': 'upDate',
        'up_id': 'upID'
    }

    def __init__(self, addr=None, cl_id=None, cr_date=None, cr_id=None, name=None, roid=None, status=None, tr_date=None, up_date=None, up_id=None):  # noqa: E501
        """HostInfDataType - a model defined in Swagger"""  # noqa: E501
        self._addr = None
        self._cl_id = None
        self._cr_date = None
        self._cr_id = None
        self._name = None
        self._roid = None
        self._status = None
        self._tr_date = None
        self._up_date = None
        self._up_id = None
        self.discriminator = None
        if addr is not None:
            self.addr = addr
        self.cl_id = cl_id
        self.cr_date = cr_date
        self.cr_id = cr_id
        self.name = name
        self.roid = roid
        if status is not None:
            self.status = status
        if tr_date is not None:
            self.tr_date = tr_date
        if up_date is not None:
            self.up_date = up_date
        if up_id is not None:
            self.up_id = up_id

    @property
    def addr(self):
        """Gets the addr of this HostInfDataType.  # noqa: E501


        :return: The addr of this HostInfDataType.  # noqa: E501
        :rtype: list[HostAddrType]
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this HostInfDataType.


        :param addr: The addr of this HostInfDataType.  # noqa: E501
        :type: list[HostAddrType]
        """

        self._addr = addr

    @property
    def cl_id(self):
        """Gets the cl_id of this HostInfDataType.  # noqa: E501


        :return: The cl_id of this HostInfDataType.  # noqa: E501
        :rtype: EppcomClIDType
        """
        return self._cl_id

    @cl_id.setter
    def cl_id(self, cl_id):
        """Sets the cl_id of this HostInfDataType.


        :param cl_id: The cl_id of this HostInfDataType.  # noqa: E501
        :type: EppcomClIDType
        """
        if cl_id is None:
            raise ValueError("Invalid value for `cl_id`, must not be `None`")  # noqa: E501

        self._cl_id = cl_id

    @property
    def cr_date(self):
        """Gets the cr_date of this HostInfDataType.  # noqa: E501


        :return: The cr_date of this HostInfDataType.  # noqa: E501
        :rtype: datetime
        """
        return self._cr_date

    @cr_date.setter
    def cr_date(self, cr_date):
        """Sets the cr_date of this HostInfDataType.


        :param cr_date: The cr_date of this HostInfDataType.  # noqa: E501
        :type: datetime
        """
        if cr_date is None:
            raise ValueError("Invalid value for `cr_date`, must not be `None`")  # noqa: E501

        self._cr_date = cr_date

    @property
    def cr_id(self):
        """Gets the cr_id of this HostInfDataType.  # noqa: E501


        :return: The cr_id of this HostInfDataType.  # noqa: E501
        :rtype: EppcomClIDType
        """
        return self._cr_id

    @cr_id.setter
    def cr_id(self, cr_id):
        """Sets the cr_id of this HostInfDataType.


        :param cr_id: The cr_id of this HostInfDataType.  # noqa: E501
        :type: EppcomClIDType
        """
        if cr_id is None:
            raise ValueError("Invalid value for `cr_id`, must not be `None`")  # noqa: E501

        self._cr_id = cr_id

    @property
    def name(self):
        """Gets the name of this HostInfDataType.  # noqa: E501


        :return: The name of this HostInfDataType.  # noqa: E501
        :rtype: EppcomLabelType
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostInfDataType.


        :param name: The name of this HostInfDataType.  # noqa: E501
        :type: EppcomLabelType
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def roid(self):
        """Gets the roid of this HostInfDataType.  # noqa: E501


        :return: The roid of this HostInfDataType.  # noqa: E501
        :rtype: EppcomRoidType
        """
        return self._roid

    @roid.setter
    def roid(self, roid):
        """Sets the roid of this HostInfDataType.


        :param roid: The roid of this HostInfDataType.  # noqa: E501
        :type: EppcomRoidType
        """
        if roid is None:
            raise ValueError("Invalid value for `roid`, must not be `None`")  # noqa: E501

        self._roid = roid

    @property
    def status(self):
        """Gets the status of this HostInfDataType.  # noqa: E501


        :return: The status of this HostInfDataType.  # noqa: E501
        :rtype: list[HostStatusType]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HostInfDataType.


        :param status: The status of this HostInfDataType.  # noqa: E501
        :type: list[HostStatusType]
        """

        self._status = status

    @property
    def tr_date(self):
        """Gets the tr_date of this HostInfDataType.  # noqa: E501


        :return: The tr_date of this HostInfDataType.  # noqa: E501
        :rtype: datetime
        """
        return self._tr_date

    @tr_date.setter
    def tr_date(self, tr_date):
        """Sets the tr_date of this HostInfDataType.


        :param tr_date: The tr_date of this HostInfDataType.  # noqa: E501
        :type: datetime
        """

        self._tr_date = tr_date

    @property
    def up_date(self):
        """Gets the up_date of this HostInfDataType.  # noqa: E501


        :return: The up_date of this HostInfDataType.  # noqa: E501
        :rtype: datetime
        """
        return self._up_date

    @up_date.setter
    def up_date(self, up_date):
        """Sets the up_date of this HostInfDataType.


        :param up_date: The up_date of this HostInfDataType.  # noqa: E501
        :type: datetime
        """

        self._up_date = up_date

    @property
    def up_id(self):
        """Gets the up_id of this HostInfDataType.  # noqa: E501


        :return: The up_id of this HostInfDataType.  # noqa: E501
        :rtype: EppcomClIDType
        """
        return self._up_id

    @up_id.setter
    def up_id(self, up_id):
        """Sets the up_id of this HostInfDataType.


        :param up_id: The up_id of this HostInfDataType.  # noqa: E501
        :type: EppcomClIDType
        """

        self._up_id = up_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInfDataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInfDataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
