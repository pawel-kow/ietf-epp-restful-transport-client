# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecDNSDsDataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alg': 'int',
        'digest': 'str',
        'digest_type': 'int',
        'key_data': 'SecDNSKeyDataType',
        'key_tag': 'int'
    }

    attribute_map = {
        'alg': 'alg',
        'digest': 'digest',
        'digest_type': 'digestType',
        'key_data': 'keyData',
        'key_tag': 'keyTag'
    }

    def __init__(self, alg=None, digest=None, digest_type=None, key_data=None, key_tag=None):  # noqa: E501
        """SecDNSDsDataType - a model defined in Swagger"""  # noqa: E501
        self._alg = None
        self._digest = None
        self._digest_type = None
        self._key_data = None
        self._key_tag = None
        self.discriminator = None
        self.alg = alg
        self.digest = digest
        self.digest_type = digest_type
        if key_data is not None:
            self.key_data = key_data
        self.key_tag = key_tag

    @property
    def alg(self):
        """Gets the alg of this SecDNSDsDataType.  # noqa: E501


        :return: The alg of this SecDNSDsDataType.  # noqa: E501
        :rtype: int
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this SecDNSDsDataType.


        :param alg: The alg of this SecDNSDsDataType.  # noqa: E501
        :type: int
        """
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501

        self._alg = alg

    @property
    def digest(self):
        """Gets the digest of this SecDNSDsDataType.  # noqa: E501


        :return: The digest of this SecDNSDsDataType.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this SecDNSDsDataType.


        :param digest: The digest of this SecDNSDsDataType.  # noqa: E501
        :type: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def digest_type(self):
        """Gets the digest_type of this SecDNSDsDataType.  # noqa: E501


        :return: The digest_type of this SecDNSDsDataType.  # noqa: E501
        :rtype: int
        """
        return self._digest_type

    @digest_type.setter
    def digest_type(self, digest_type):
        """Sets the digest_type of this SecDNSDsDataType.


        :param digest_type: The digest_type of this SecDNSDsDataType.  # noqa: E501
        :type: int
        """
        if digest_type is None:
            raise ValueError("Invalid value for `digest_type`, must not be `None`")  # noqa: E501

        self._digest_type = digest_type

    @property
    def key_data(self):
        """Gets the key_data of this SecDNSDsDataType.  # noqa: E501


        :return: The key_data of this SecDNSDsDataType.  # noqa: E501
        :rtype: SecDNSKeyDataType
        """
        return self._key_data

    @key_data.setter
    def key_data(self, key_data):
        """Sets the key_data of this SecDNSDsDataType.


        :param key_data: The key_data of this SecDNSDsDataType.  # noqa: E501
        :type: SecDNSKeyDataType
        """

        self._key_data = key_data

    @property
    def key_tag(self):
        """Gets the key_tag of this SecDNSDsDataType.  # noqa: E501


        :return: The key_tag of this SecDNSDsDataType.  # noqa: E501
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag):
        """Sets the key_tag of this SecDNSDsDataType.


        :param key_tag: The key_tag of this SecDNSDsDataType.  # noqa: E501
        :type: int
        """
        if key_tag is None:
            raise ValueError("Invalid value for `key_tag`, must not be `None`")  # noqa: E501

        self._key_tag = key_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecDNSDsDataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecDNSDsDataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
