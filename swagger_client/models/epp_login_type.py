# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EppLoginType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cl_id': 'EppcomClIDType',
        'new_pw': 'EppPwType',
        'options': 'EppCredsOptionsType',
        'pw': 'EppPwType',
        'svcs': 'EppLoginSvcType'
    }

    attribute_map = {
        'cl_id': 'clID',
        'new_pw': 'newPW',
        'options': 'options',
        'pw': 'pw',
        'svcs': 'svcs'
    }

    def __init__(self, cl_id=None, new_pw=None, options=None, pw=None, svcs=None):  # noqa: E501
        """EppLoginType - a model defined in Swagger"""  # noqa: E501
        self._cl_id = None
        self._new_pw = None
        self._options = None
        self._pw = None
        self._svcs = None
        self.discriminator = None
        self.cl_id = cl_id
        if new_pw is not None:
            self.new_pw = new_pw
        self.options = options
        self.pw = pw
        self.svcs = svcs

    @property
    def cl_id(self):
        """Gets the cl_id of this EppLoginType.  # noqa: E501


        :return: The cl_id of this EppLoginType.  # noqa: E501
        :rtype: EppcomClIDType
        """
        return self._cl_id

    @cl_id.setter
    def cl_id(self, cl_id):
        """Sets the cl_id of this EppLoginType.


        :param cl_id: The cl_id of this EppLoginType.  # noqa: E501
        :type: EppcomClIDType
        """
        if cl_id is None:
            raise ValueError("Invalid value for `cl_id`, must not be `None`")  # noqa: E501

        self._cl_id = cl_id

    @property
    def new_pw(self):
        """Gets the new_pw of this EppLoginType.  # noqa: E501


        :return: The new_pw of this EppLoginType.  # noqa: E501
        :rtype: EppPwType
        """
        return self._new_pw

    @new_pw.setter
    def new_pw(self, new_pw):
        """Sets the new_pw of this EppLoginType.


        :param new_pw: The new_pw of this EppLoginType.  # noqa: E501
        :type: EppPwType
        """

        self._new_pw = new_pw

    @property
    def options(self):
        """Gets the options of this EppLoginType.  # noqa: E501


        :return: The options of this EppLoginType.  # noqa: E501
        :rtype: EppCredsOptionsType
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EppLoginType.


        :param options: The options of this EppLoginType.  # noqa: E501
        :type: EppCredsOptionsType
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def pw(self):
        """Gets the pw of this EppLoginType.  # noqa: E501


        :return: The pw of this EppLoginType.  # noqa: E501
        :rtype: EppPwType
        """
        return self._pw

    @pw.setter
    def pw(self, pw):
        """Sets the pw of this EppLoginType.


        :param pw: The pw of this EppLoginType.  # noqa: E501
        :type: EppPwType
        """
        if pw is None:
            raise ValueError("Invalid value for `pw`, must not be `None`")  # noqa: E501

        self._pw = pw

    @property
    def svcs(self):
        """Gets the svcs of this EppLoginType.  # noqa: E501


        :return: The svcs of this EppLoginType.  # noqa: E501
        :rtype: EppLoginSvcType
        """
        return self._svcs

    @svcs.setter
    def svcs(self, svcs):
        """Sets the svcs of this EppLoginType.


        :param svcs: The svcs of this EppLoginType.  # noqa: E501
        :type: EppLoginSvcType
        """
        if svcs is None:
            raise ValueError("Invalid value for `svcs`, must not be `None`")  # noqa: E501

        self._svcs = svcs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EppLoginType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EppLoginType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
