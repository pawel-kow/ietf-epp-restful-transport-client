# coding: utf-8

"""
    RESTful EPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EppResultCodeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _1000 = "1000"
    _1001 = "1001"
    _1300 = "1300"
    _1301 = "1301"
    _1500 = "1500"
    _2000 = "2000"
    _2001 = "2001"
    _2002 = "2002"
    _2003 = "2003"
    _2004 = "2004"
    _2005 = "2005"
    _2100 = "2100"
    _2101 = "2101"
    _2102 = "2102"
    _2103 = "2103"
    _2104 = "2104"
    _2105 = "2105"
    _2106 = "2106"
    _2200 = "2200"
    _2201 = "2201"
    _2202 = "2202"
    _2300 = "2300"
    _2301 = "2301"
    _2302 = "2302"
    _2303 = "2303"
    _2304 = "2304"
    _2305 = "2305"
    _2306 = "2306"
    _2307 = "2307"
    _2308 = "2308"
    _2400 = "2400"
    _2500 = "2500"
    _2501 = "2501"
    _2502 = "2502"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EppResultCodeType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EppResultCodeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EppResultCodeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
